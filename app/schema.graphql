input createUserInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type createUserPayload {
  user: User
  clientMutationId: String
}

type Mutation {
  createUser(input: createUserInput!): createUserPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}
# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  user(id: ID!): User
  users(after: String, first: Int): UserConnection

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Fetches objects given their IDs
  nodes(
    # The IDs of objects
    ids: [ID!]!
  ): [Node]!
}

# User
type User {
  _id: ID!
  name: String
  email: String
  password: String
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}
